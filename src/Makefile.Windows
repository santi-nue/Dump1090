#
# GNU Makefile for dump1090 (x86/x64, MSVC or clang-cl).
#
# By G. Vanem <gvanem@yahoo.no> 2021 - 2024.
#
# Ref: https://github.com/gvanem/Dump1090.git
#
TODAY      = $(shell date +%d-%B-%Y)
YEAR       = $(shell date +%Y)
THIS_FILE  = Makefile.Windows
MAKEFLAGS += --warn-undefined-variables

#
# Choose your weapons:
#
# Use CRT debug-mode.
#
USE_CRT_DEBUG ?= 0

#
# Use '../tools/gen_routes_data.py' to generate '$(OBJ_DIR)/routes.c' from '../routes.csv'?
#
USE_GEN_ROUTES ?= 1

#
# TODO:
# use '../tools/gen_data.py' and 'git pull' to generate these:
#   $(TEMP)/dump1090/standing-data/results/aircrafts.bin
#   $(TEMP)/dump1090/standing-data/results/airports.bin
#   $(TEMP)/dump1090/standing-data/results/routes.bin
#
USE_BIN_FILES ?= 1

#
# Option for polling of network events in 'externals/mongoose.c':
#   USE_NET_POLLER=EPOLL:   use a Windows version of 'epoll()' from https://github.com/piscisaureus/wepoll
#   USE_NET_POLLER=WSAPOLL: use 'WSAPoll()'
#   USE_NET_POLLER=SELECT:  use 'select()'
#
USE_NET_POLLER ?= WSAPOLL

#
# Enable bundling *all* web_root pages inside '../web-pages.dll' as multiple resources.
# Use e.g. as '../web-pages.dll;2' for '../web_root-FlightAware/*' as web-root.
#
USE_PACKED_DLL ?= 0

#
# Pack '../web-pages.dll' using UPX.EXE? Needs an up-to-date version
# found under https://github.com/upx/upx/releases
#
USE_UPX ?= 0

#
# Enable the 2.4 MS/s decoder from 'readsb'?
# Not possible at the moment.
#
USE_READSB_DEMOD ?= 0

#
# Enable "Address Sanitation".
# This needs an up-to-date version of 'cl'.
#
# Does not work with 'USE_CRT_DEBUG = 1' and 'CC = clang-cl'.
# But 'USE_CRT_DEBUG = 1' and 'CC = cl' works.
#
USE_ASAN ?= 0

#
# Use "Undefined Behavior Sanitizer (UBSan)"?
# Currently only 'clang-cl' supports this.
#
USE_UBSAN ?= 0

#
# Enable the alternative malloc() library "mimalloc"
# in 'externals/mimalloc/*.c'?
#
USE_MIMALLOC ?= 1

#
# Compile using 'cl -MP ...'. For MSVC only.
#
USE_MP_COMPILE ?= 1

#
# For my private build; use the tracing Winsock library?
# Ref:
#   https://github.com/gvanem/wsock-trace/
#
USE_WSOCK_TRACE ?= 0

#
# Enable 'astyle' in .c-file preprocessing.
#
USE_ASTYLE ?= 1

#
# Python is needed for:
#   *) .c-file preprocessing.
#   *) generation of '$(OBJ_DIR)/web-pages-*.c'.
#   *) and in the 'link_EXE()' macro.
#
PYTHON ?= py -3

#
# Change the 'CLANG_[32|64]' directory to suite:
# Only important if 'USE_ASAN = 1' and/or 'USE_UBSAN = 1' with 'CC = clang-cl'.
#
CLANG_32        ?= c:/ProgramFiles/LLVM-15-32bit
CLANG_64        ?= c:/ProgramFiles/LLVM-15-64bit
CLANG_MAJOR_VER ?= 15

define Usage

  Usage: "make -f $(THIS_FILE) [CC=cl | clang-cl] <CPU=x86 | x64> [all | clean | vclean | depend]")
  Specify CC=cl       - build with MSVC
  Specify CC=clang-cl - build with clang-cl
  Specify CPU=x86     - build for 32-bit
  Specify CPU=x64     - build for 64-bit
endef

#
# Undefine any '%CL%' env-var
#
export CL=

#
# Undefine any gcc include-path env-vars since
# it could confuse clang-cl.
#
export C_INCLUDE_PATH=
export CPLUS_INCLUDE_PATH=

OBJ_DIR = objects

c_to_obj = $(addprefix $(OBJ_DIR)/, $(notdir $(1:.c=.obj)))

ifneq ($(CC),cl)
  ifneq ($(CC),clang-cl)
    $(error $(Usage))
  endif
endif

#
# The CFLAGS + LDFLAGS used. Printed on '../dump1090.exe -VV'.
#
GENERATED = $(OBJ_DIR)/cflags_$(CC).h \
            $(OBJ_DIR)/ldflags_$(CC).h

#
# For the 'link_EXE' macro
#
GENERATED += $(OBJ_DIR)/check-for-unused-libs.py

vpath %.c externals        \
          externals/Curses \
          externals/rtl-sdr

vpath %.rc $(OBJ_DIR)

CFLAGS = -nologo -c -Zi -W4        \
         -FI./dump1090_config.h    \
         -fp:strict                \
         -I.                       \
         -I./externals             \
         -I./externals/Curses      \
         -I./externals/rtl-sdr     \
         -I./externals/SDRplay-API \
         -I./$(OBJ_DIR)

#
# Handling of 'volatile' variables:
#   https://learn.microsoft.com/en-us/cpp/build/reference/volatile-volatile-keyword-interpretation?view=msvc-170
#
CFLAGS += -volatile:iso

LDFLAGS = -nologo -map -debug -verbose -incremental:no \
          -nodefaultlib:oldnames.lib -machine:$(CPU)

RCFLAGS = -nologo

ifeq ($(USE_CRT_DEBUG),1)
  CFLAGS  += -MDd -GS -Oy- -RTCu -RTCs
  RCFLAGS += -D_DEBUG
else
  CFLAGS += -MD -GS- -Zo -Oy- -Ox -Gs0
endif

ifeq ($(CC),clang-cl)
  CFLAGS  += -fms-compatibility -ferror-limit=5
  RCFLAGS += -D__clang__
else
  RCFLAGS += -D_MSC_VER
endif

#
# If '$(CPU)=x64', build 64-bit targets. Otherwise 32-bit targets.
#
ifeq ($(CPU),x64)
  BITS = 64
else ifeq ($(CPU),x86)
  BITS = 32
else
  $(error Add an env-var 'CPU=x64' (or 'CPU=x86') depending on the active compiler.)
endif

OS_LIBS   = advapi32.lib iphlpapi.lib ole32.lib setupapi.lib user32.lib winusb.lib
ASAN_LIBS =
COPY_DLLs =

ifneq ($(CC),clang-cl)
  ifeq ($(USE_UBSAN),1)
    $(error 'USE_UBSAN' is for 'clang-cl' only)
  endif
endif

#
# ASAN build settings:
#
# This works best:
#   c:\> set ASAN_OPTIONS=print_stats=1:windows_hook_legacy_allocators=1:color=always:halt_on_error=0
#
# A ':log_path=c:/temp/dump1090/ASAN.log' too could be useful.
#
# Refs:
#   https://docs.microsoft.com/en-us/cpp/sanitizers/asan?view=msvc-160
#   https://github.com/google/sanitizers/wiki/AddressSanitizer
#   https://github.com/google/sanitizers/wiki/AddressSanitizerFlags
#
# A 'USE_ASAN = 1' can be used with 'USE_UBSAN = 1' too.
#
ifeq ($(USE_ASAN),1)
  CFLAGS  += -DUSE_ASAN -fsanitize=address
  RCFLAGS += -DUSE_ASAN

  ifeq ($(CC),clang-cl)
    CFLAGS += -fsanitize-stats                          \
              -fsanitize-address-globals-dead-stripping \
              -fsanitize-address-use-after-scope

    ifeq ($(CPU),x86)
      ASAN_LIBS = clang_rt.asan_dynamic-i386.lib \
                  clang_rt.asan_dynamic_runtime_thunk-i386.lib
    else
      ASAN_LIBS = clang_rt.asan_dynamic-x86_64.lib \
                  clang_rt.asan_dynamic_runtime_thunk-x86_64.lib
    endif

    ASAN_LIBS += kernel32.lib
  endif
endif

#
# UBSAN build settings:
#
# Add a 'set UBSAN_OPTIONS=print_stacktrace=1:log_path=c:/temp/dump1090/UBSAN.log'
# to your environment to make sense of the UBSAN check output.
#
# The list of UBSAN checks for Clang:
#   https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html#ubsan-checks
#
ifeq ($(USE_UBSAN),1)
  RCFLAGS += -DUSE_UBSAN
  CFLAGS  += -DUSE_UBSAN -fsanitize=undefined

  #
  # Turn some checks off?
  #
  # CFLAGS += -fno-sanitize=alignment
  # CFLAGS += -fno-sanitize=object-size
  # CFLAGS += -fno-sanitize=function

  #
  # This causes Undefined Behavior to cause an Illegal Instruction.
  # Turn on/off at own will.
  #
  # CFLAGS += -fsanitize-trap=undefined
endif

#
# ASAN / UBSAN with clang-cl is a bit tricky with regard to linking;
# Use an explicit '-libpath:' for it.
#
# Besides a Visual-Studio .DLL for ASAN could have missing imports needed
# by 'USE_UBSAN=1'. Hence copy the needed .DLL over to current directory.
# (and remove it on a 'make clean').
#
ifeq ($(CC),clang-cl)
  ifneq ($(USE_ASAN)$(USE_UBSAN),00)
    ifeq ($(CLANG_MAJOR_VER),)
      $(error 'CLANG_MAJOR_VER' must be set in your environment.)
    endif

    $(info Detected 'CLANG_ROOT=$(realpath $(CLANG_$(BITS)))' for 'USE_ASAN=$(USE_ASAN)' and 'USE_UBSAN=$(USE_UBSAN)'.)

    #
    # The default for 'x86 / Release' is 'clang_rt.asan_dynamic_runtime_thunk-i386.lib'
    # (and clang_rt.asan_dbg_dynamic_runtime_thunk-i386.lib for 'x86 / Debug')
    #
    LDFLAGS += -libpath:$(realpath $(CLANG_$(BITS)))/lib/clang/$(CLANG_MAJOR_VER)/lib/windows

    ifeq ($(CPU),x86)
      COPY_DLLs = $(realpath $(CLANG_$(BITS)))/lib/clang/$(CLANG_MAJOR_VER)/lib/windows/clang_rt.asan_dynamic-i386.dll
    else
      COPY_DLLs = $(realpath $(CLANG_$(BITS)))/lib/clang/$(CLANG_MAJOR_VER)/lib/windows/clang_rt.asan_dynamic-x86_64.dll
    endif
  endif
endif

RCFLAGS += -DRC_BITS=$(BITS)

ifeq ($(USE_WSOCK_TRACE),1)
  OS_LIBS += wsock_trace-$(CPU).lib
  LDFLAGS += -nodefaultlib:ws2_32.lib
else
  OS_LIBS += ws2_32.lib
endif

#
# What to build:
#
TARGETS = ../dump1090.exe

SOURCES = aircraft.c           \
          airports.c           \
          cfg_file.c           \
          csv.c                \
          dump1090.c           \
          interactive.c        \
          misc.c               \
          net_io.c             \
          location.c           \
          pconsole.c           \
          sdrplay.c            \
          externals/mongoose.c \
          externals/sqlite3.c  \
          externals/zip.c      \
          externals/Curses/amalgamation.c

SOURCES += $(addprefix externals/rtl-sdr/, \
             librtlsdr.c                   \
             trace.c                       \
             tuner_e4k.c                   \
             tuner_fc001x.c                \
             tuner_fc2580.c                \
             tuner_r82xx.c)

ifeq ($(USE_GEN_ROUTES),1)
  SOURCES += $(OBJ_DIR)/routes.c
  CFLAGS  += -DUSE_GEN_ROUTES
endif

ifeq ($(USE_MIMALLOC),1)
  vpath %.c  externals/mimalloc
  SOURCES += externals/mimalloc/mimalloc-amalgamation.c

  CFLAGS += -DUSE_MIMALLOC=1      \
            -DMI_STAT=2           \
            -DMI_TRACK_VALGRIND=0 \
            -I./externals/mimalloc

  #
  # Enable "Tracking for ASAN"
  #
  CFLAGS += -DMI_TRACK_ASAN=$(USE_ASAN)

  ifeq ($(USE_CRT_DEBUG),1)
    #
    # Set debug-level 4 and enable "Event Tracing for Windows" in '_DEBUG' mode
    #
    CFLAGS += -DMI_TRACK_ETW=1 \
              -DMI_DEBUG=4
  endif
endif

#
# For '../web-pages.dll':
#
WEB_SUFFIXES ?= 1 2 3 4 5

WEB_SRC := $(addsuffix .c, \
             $(addprefix $(OBJ_DIR)/web-page-, $(WEB_SUFFIXES)))

ifeq ($(USE_PACKED_DLL),1)
  TARGETS   += ../web-pages.dll
  CFLAGS    += -DUSE_PACKED_DLL
  GENERATED += $(WEB_SRC)
endif

ifeq ($(USE_NET_POLLER),EPOLL)
  CFLAGS  += -DMG_ENABLE_EPOLL=1
  SOURCES += externals/wepoll.c

else ifeq ($(USE_NET_POLLER),WSAPOLL)
  CFLAGS += -DMG_ENABLE_POLL=1

else ifeq ($(USE_NET_POLLER),SELECT)
  #
  # No code checks for this, but for '../dump1090.exe -VV' only
  #
  CFLAGS += -DMG_ENABLE_SELECT=1
else
  $(error Illegal 'USE_NET_POLLER=$(USE_NET_POLLER)' value)
endif

ifeq ($(USE_READSB_DEMOD),1)
  CFLAGS  += -DUSE_READSB_DEMOD
  SOURCES += externals/demod_2400.c
endif

OBJECTS = $(call c_to_obj, $(SOURCES))
WEB_OBJ = $(call c_to_obj, $(WEB_SRC))

#
# Select currect MSVC / clang-cl compiler without the 'vcvarsall.bat' non-sense.
#
# E.g.:
#  'VCToolkitInstallDir=c:\dev\VC_2019\VC\Tools\MSVC\14.38.32919' -- the root of the MSVC tools.
#  'WindowsSdkDir=c:\ProgramFiles-x86\Windows-Kits'               -- the root of the 'WindowsKits' API.
#  'WindowsSdkVer=10.0.19041.0'                                   -- the 'WindowsKits' version.
#
TOOLS_ROOT = $(realpath $(VCToolkitInstallDir))

ifeq ($(CC),clang-cl)
  _CC = $(realpath $(CLANG_$(BITS)))/bin/clang-cl.exe
else
  _CC = $(TOOLS_ROOT)/bin/HostX64/$(CPU)/cl.exe
endif

#
# The path for the CRT libraries.
#
LDFLAGS += -libpath:$(TOOLS_ROOT)/lib/$(CPU)

#
# The path for the "Windows Kit" libraries.
#
# E.g. the User-Mode libraries for 'x86' are in:
#   $(WindowsSdkDir)/Lib/$(WindowsSdkVer)/um/x86/
#
LDFLAGS += -libpath:$(realpath $(WindowsSdkDir))/Lib/$(WindowsSdkVer)/um/$(CPU)

#
# The path for the "Universal CRT" (UCRT) libraries.
#
# E.g. the UCRT libraries for 'x86' are in:
#   $(WindowsSdkDir)/Lib/$(WindowsSdkVer)/ucrt/x86/
#
LDFLAGS += -libpath:$(realpath $(WindowsSdkDir))/Lib/$(WindowsSdkVer)/ucrt/$(CPU)

all: $(GENERATED) $(TARGETS) DLL_copy
	$(call green_msg, Welcome to Dump1090.)

$(OBJ_DIR) doxy-docs:
	- mkdir $@

../dump1090.exe: $(OBJECTS) $(OBJ_DIR)/dump1090.res
	$(call link_EXE, $@, $^ $(OS_LIBS) $(ASAN_LIBS))

../sqlite3.exe: $(OBJ_DIR)/sqlite3-shell.obj $(OBJ_DIR)/sqlite3.obj
	$(call link_EXE, $@, $^ -nodefaultlib:uuid.lib oldnames.lib)

$(OBJ_DIR)/sqlite3-shell.obj: externals/sqlite3-shell.c | $(CC).args
	$(call C_compile, $@, -DCOMPILING_SQLITE3_SHELL $<)

../web-pages.dll: $(WEB_OBJ) $(OBJ_DIR)/web-pages.res
	$(call link_web_DLL, $@, $^ $(ASAN_LIBS), $(WEB_SUFFIXES))

$(OBJ_DIR)/web-pages.rc: $(THIS_FILE)
	$(call generate, $@, //)
	$(file >> $@,$(web_pages_RC))

$(OBJ_DIR)/%.res: %.rc
	$(call create_res_file, $@, $<)

ifeq ($(CC)-$(USE_MP_COMPILE),cl-1)
  $(OBJECTS): $(SOURCES) | $(CC).args
	$(call green_msg, Compiling $(words $(SOURCES)) .c-files in one go...)
	$(call C_compile, $(OBJ_DIR)\\, -MP $(SOURCES))

else
  $(OBJ_DIR)/routes.obj: $(OBJ_DIR)/routes.c | $(CC).args
	$(call C_compile_long_time, $@, $<)

  $(OBJ_DIR)/sqlite3.obj: externals/sqlite3.c | $(CC).args
	$(call C_compile_long_time, $@, $<)

  $(OBJ_DIR)/%.obj: %.c | $(CC).args
	$(call C_compile, $@, $<)
endif

$(OBJ_DIR)/web-page-1.c: ../tools/gen_packed_fs.py
	$(call generate_web_page, $@, ../web_root, 1,)

$(OBJ_DIR)/web-page-2.c: ../tools/gen_packed_fs.py
	$(call generate_web_page, $@, ../web_root-FlightAware, 2,)

$(OBJ_DIR)/web-page-3.c: ../tools/gen_packed_fs.py
	$(call generate_web_page, $@, ../web_root-OpenLayers3, 3, --ignore "../web_root-OpenLayers3/3d/*" --ignore "../web_root-OpenLayers3/sql/*")

$(OBJ_DIR)/web-page-4.c: ../tools/gen_packed_fs.py
	$(call generate_web_page, $@, ../web_root-OpenLayers3/3d, 4,)

$(OBJ_DIR)/web-page-5.c: ../tools/gen_packed_fs.py
	$(call generate_web_page, $@, ../web_root-Tar1090, 5,)

$(OBJ_DIR)/web-page-%.obj: $(OBJ_DIR)/web-page-%.c | $(CC).args
	$(call C_compile_long_time, $@, $<)

$(OBJ_DIR)/packed_webfs_1.c: ../tools/gen_packed_fs.py
	$(call generate_web_page, $@, ../web_root-OpenLayers3, 1, --ignore "../web_root-OpenLayers3/3d/*" --ignore "../web_root-OpenLayers3/sql/*")

$(OBJ_DIR)/packed_webfs_2.c: ../tools/gen_packed_fs.py
	$(call generate_web_page, $@, ../web_root-OpenLayers3, 2, --ignore "../web_root-OpenLayers3/3d/*" --ignore "../web_root-OpenLayers3/sql/*" --minify)

#
# Test the output of the non-minified and minified '$(OBJ_DIR)/packed_webfs*.c' files.
#
$(OBJ_DIR)/packed_webfs_%.obj: $(OBJ_DIR)/packed_webfs_%.c | $(CC).args
	$(call C_compile_long_time, $@, $<)

packed_test_OBJ = $(addprefix $(OBJ_DIR)/, \
                    packed_webfs_main.obj  \
                    packed_webfs_1.obj     \
                    packed_webfs_2.obj     \
                    misc.obj)

ifeq ($(USE_MIMALLOC),1)
  packed_test_OBJ += $(OBJ_DIR)/mimalloc-amalgamation.obj
endif

../packed_test.exe: $(packed_test_OBJ)
	$(call link_EXE, $@, -nodefaultlib:uuid.lib advapi32.lib $^)

$(OBJ_DIR)/packed_webfs_main.obj: ../tools/packed_webfs_main.c | $(CC).args
	$(call C_compile, $@, $<)

#
# When 'USE_GEN_ROUTES = 1'
#
$(OBJ_DIR)/routes.c: ../tools/gen_routes_data.py ../routes.csv
	$(call green_msg, Generating $@)
	$(PYTHON) $< ../routes.csv > $@
	@echo

$(CC).args: $(THIS_FILE)
	$(call green_msg, All common CFLAGS are in $@)
	$(call create_resp_file, $@, $(CFLAGS))

#
# Not needed since 'favicon.c' is not in 'make clean'.
#
gen_favicons: favicon.png favicon.ico
	$(call generate, favicon.c, //)
	@echo -e '\n// Generated array from favicon.png' >> favicon.c
	xxd -i favicon.png >> favicon.c
	@echo -e '\n// Generated array from favicon.ico' >> favicon.c
	xxd -i favicon.ico >> favicon.c
	@echo

#
# For '../dump1090.exe -VV':
#
$(OBJ_DIR)/cflags_$(CC).h: $(THIS_FILE) | $(OBJ_DIR)
	$(call generate_cflags_h, $@, $(_CC) $(CFLAGS))

$(OBJ_DIR)/ldflags_$(CC).h: $(THIS_FILE) | $(OBJ_DIR)
	$(call generate_ldflags_h, $@, link $(LDFLAGS) -out:dump1090.exe $(OBJECTS) $(OBJ_DIR)/dump1090.res $(OS_LIBS) $(ASAN_LIBS))

docs: doxy-docs doxy-docs/Doxyfile
	$(call green_white_msg, Running, doxygen doxy-docs/Doxyfile)
	cd $< ; doxygen Doxyfile
	$(call green_white_msg, Generating, $</dump1090.chm)
	- ( cd $< ; hhc index.hhp )
	mv --force $</dump1090.chm ..
	$(call green_white_msg, Done generating Doxygen docs and, ../dump1090.chm)

docs_clean:
	rm -fr doxy-docs
	rm -f ../dump1090.chm

doxy-docs/Doxyfile: doxy-docs $(THIS_FILE)
	$(call generate, $@, #)
	$(file >> $@,$(dump1090_Doxyfile))

%.i: %.c $(OBJ_DIR)/cpp-filter.py $(CC).args FORCE
	$(call C_preprocess, $@, $<)

FORCE:

$(OBJ_DIR)/cpp-filter.py: $(THIS_FILE) | $(OBJ_DIR)
	$(call generate_py,$@,$(cpp_filter_py))

$(OBJ_DIR)/check-for-unused-libs.py: $(THIS_FILE) | $(OBJ_DIR)
	$(call generate_py,$@,$(check_for_unused_libs_py))

#
# Copy the needed .DLL for 'USE_UBSAN=1'
#
ifeq ($(COPY_DLLs),)
  DLL_copy:
	$(call green_msg, No .DLLs to copy)
else
  DLL_copy:
	$(call green_msg, Copying '$(COPY_DLLs)' to CWD)
	cp --update $(COPY_DLLs) .
endif

DLL_clean:
	rm -f clang_rt.asan_dynamic*.dll

#
# Clean up after Visual-Studio
#
VS_clean:
	rm -fr .vs x64 x86 Dump1090

#
# '$(sort ..)' will create a unique list.
#
TARGETS_JUNK = $(sort $(TARGETS:.exe=.map)     \
                      $(TARGETS:.exe=.pdb)     \
                      $(TARGETS:.exe=.exp)     \
                      $(TARGETS:.exe=.lib)     \
                      ../packed_test.{map,pdb} \
                      ../sqlite3.{map,pdb}     \
                      ../web-pages.{map,pdb})

OTHER_JUNK = vc1*.pdb link.tmp link.args cl.args clang-cl.args

clean: docs_clean DLL_clean VS_clean
	rm -f $(TARGETS_JUNK) $(OTHER_JUNK)
	rm -f $(OBJ_DIR)/*.obj $(OBJ_DIR)/*.res
	- @rmdir $(OBJ_DIR) 2>/dev/null

vclean realclean: clean
	rm -f $(TARGETS) ../packed_test.exe ../sqlite3.exe ../web-pages.dll .depend.Windows
	rm -fr $(OBJ_DIR)

#
# GNU-make macros:
#
# This assumes you have an MSys/Cygwin 'echo.exe' with colour support.
#
BRIGHT_GREEN = \e[1;32m
BRIGHT_WHITE = \e[1;37m

green_msg       = @echo -e "$(BRIGHT_GREEN)$(strip $(1))\e[0m"
green_white_msg = $(call green_msg, $(1) $(BRIGHT_WHITE)$(strip $(2)) $(BRIGHT_GREEN)...)

define C_compile
  $(_CC) @$(CC).args -Fo./$(strip $(1) $(2))
  @echo
endef

define C_compile_long_time
  $(call green_msg, Compiling $(1) will take some time...)
  $(_CC) @$(CC).args -Fo./$(strip $(1) $(2))
  @echo
endef

define create_res_file
  rc $(RCFLAGS) -fo $(strip $(1) $(2))
  @echo
endef

define create_resp_file
  $(file > $(1))
  $(foreach f, $(2), $(file >> $(1),$(strip $(f))) )
endef

define link_EXE
  $(call green_msg, Linking $(1))
  $(call create_resp_file, link.args, $(LDFLAGS) $(2))
  link -out:$(strip $(1)) @link.args > link.tmp
  @cat link.tmp >> $(1:.exe=.map)
  @rm -f $(1:.exe=.exp) $(1:.exe=.lib)
  @$(PYTHON) $(OBJ_DIR)/check-for-unused-libs.py link.tmp
endef

define func_exports
  $(foreach e, $(1), -export:mg_unpack_$(e))
  $(foreach e, $(1), -export:mg_unlist_$(e))
  $(foreach e, $(1), -export:mg_spec_$(e))
endef

#
# This will typically shrink '../web-pages.dll' from 125 MBytes to 25 MBytes.
# 5 times smaller!
#
ifeq ($(USE_UPX),1)
  upx_pack = $(call green_msg, Compressing $(1) will take some time...) && \
             upx -v $(1)
else
  upx_pack = @echo
endif

define link_web_DLL
  $(call green_msg, Linking $(1))
  $(call create_resp_file, link.args, -dll $(LDFLAGS) $(call func_exports, $(3)) $(2) oldnames.lib)
  link -out:$(strip $(1)) @link.args > link.tmp
  @cat link.tmp >> $(1:.dll=.map)
  @rm -f $(1:.dll=.exp) $(1:.dll=.lib)
  $(call upx_pack, $(1))
endef

define Warning
  $(1)
  $(1) DO NOT EDIT! This file was automatically generated
  $(1) from $(CURDIR)/$(THIS_FILE) at $(TODAY).
  $(1) Edit that file instead.
  $(1)
endef

define generate
  $(call green_msg, Generating $(1))
  $(file > $(1),$(call Warning,$(strip $(2))))
endef

define generate_py
  $(call generate, $(1), #)
  $(file >> $@,if 1:)
  $(file >> $@,$(2))
endef

define generate_cflags_h
  $(call generate, $(1),//)
  $(file >> $(1),const char *cflags = "$(strip $(2))";)
endef

define generate_ldflags_h
  $(call generate, $(1),//)
  $(file >> $(1),const char *ldflags = "$(strip $(2))";)
endef

define generate_web_page
  $(call green_msg, Generating $(1))
  $(PYTHON) ../tools/gen_packed_fs.py --outfile $(strip $(1) --verbose --recursive --suffix=_$(strip $(3)) $(4) --strip $(2)/ $(2)/)
endef

#
# clang-cl: /d1PP  Retain macro definitions in /E mode
#
ifeq ($(CC),clang-cl)
  d1PP = -d1PP
else
  d1PP =
endif

ifeq ($(USE_ASTYLE),1)
  C_FORMATER = | astyle
else
  C_FORMATER =
endif

define C_preprocess
  $(call green_msg, Preprocessing $(2))
  $(file  > $(1),/* The result of preprocessing '$(strip $(2))' (USE_ASTYLE=$(USE_ASTYLE)):)
  $(file >> $(1), *  $(CC) -E)
  $(foreach f, $(CFLAGS) $(d1PP), $(file >> $(1), *  $(f)))
  $(file >> $(1), *---------------------------------------------------------)
  $(file >> $(1), * Try to compile this output.)
  $(file >> $(1), */)
  $(_CC) -E @$(CC).args $(d1PP) $(2) | $(PYTHON) $(OBJ_DIR)/cpp-filter.py $(C_FORMATER) >> $(1)
endef

#
# No doxygen tags in these:
#
doxy_SOURCES = $(filter-out $(OBJ_DIR)/routes.c              \
                            externals/sqlite3.c              \
                            externals/Curses/amalgamation.c, \
                            $(SOURCES))

doxy_SOURCES := $(addprefix ../, $(doxy_SOURCES))

doxy_HEADERS = ../aircraft.h                  \
               ../airports.h                  \
               ../cfg_file.h                  \
               ../csv.h                       \
               ../dump1090_config.h           \
               ../interactive.h               \
               ../location.h                  \
               ../misc.h                      \
               ../net_io.h                    \
               ../sdrplay.h                   \
               ../externals/rtl-sdr/rtl-sdr.h \
               ../externals/rtl-sdr/rtl-tcp.h \
               ../externals/miniz.h           \
               ../externals/zip.h

define dump1090_Doxyfile
  PROJECT_NAME          = "Dump1090"
  PROJECT_LOGO          = ../dump1090.ico
  STRIP_FROM_PATH       = $(CURDIR)/
  OPTIMIZE_OUTPUT_FOR_C = yes
  FORCE_LOCAL_INCLUDES  = yes
  QUIET                 = yes
  PREDEFINED            = __DOXYGEN__:=1 _WIN32:=1
  INPUT                 = $(doxy_SOURCES) \
                          $(doxy_HEADERS)
  #
  # Do not document the huge '$(OBJ_DIR)/routes.c' file
  #
  # EXCLUDE               = routes.c

  EXAMPLE_PATH          = ..
  IMAGE_PATH            = .. ../..
  INLINE_SIMPLE_STRUCTS = yes
  SOURCE_BROWSER        = yes
  CALL_GRAPH            = yes
  CALLER_GRAPH          = yes
  EXTRACT_STATIC        = yes
  HAVE_DOT              = yes
  OUTPUT_DIRECTORY      = $(CURDIR)/doxy-docs
  HTML_OUTPUT           = .
  HTML_DYNAMIC_MENUS    = no
  HTML_COLORSTYLE       = light
  GENERATE_HTMLHELP     = yes
  GENERATE_LATEX        = no
  SEARCHENGINE          = no
  WARNINGS              = yes
  WARN_LOGFILE          = $(CURDIR)/doxy-docs/doxygen.log
  CHM_FILE              = dump1090.chm
endef

define web_pages_RC
  #include <winver.h>
  #include "dump1090_config.h"

  VS_VERSION_INFO VERSIONINFO
    FILEVERSION     RC_VERSION
    PRODUCTVERSION  RC_VERSION
    FILEFLAGSMASK   0x3fL
    FILEOS          VOS__WINDOWS32
    FILETYPE        VFT_DLL
    FILESUBTYPE     0x0L
    FILEFLAGS       0

  BEGIN
    BLOCK "StringFileInfo"
    BEGIN
      BLOCK "040904b0"
      BEGIN
        VALUE "CompanyName",      "https://github.com/gvanem/Dump1090"
        VALUE "FileDescription",  "Dump1090 bundled web-pages."
        VALUE "FileVersion",      RC_VER_STRING
        VALUE "InternalName",     "Dump1090 web-pages"
        VALUE "LegalCopyright",   "Copyright (c) 2022-$(YEAR) Gisle Vanem"
        VALUE "LegalTrademarks",  "MIT License "
        VALUE "OriginalFilename", "web-pages.dll"
        VALUE "ProductName",      "Dump1090"
        VALUE "ProductVersion",   RC_VER_STRING
      END
    END
  BLOCK "VarFileInfo"
  BEGIN
    VALUE "Translation", 0x409, 1200
  END
  END
endef

define cpp_filter_py
  import sys, os

  empty_lines = 0
  while True:
    line = sys.stdin.readline()
    if not line:
       break
    line = line.rstrip()
    if line == "":
       empty_lines += 1
       continue

    #
    # MSVC or clang-cl 'line' directive
    #
    l = line.lstrip()
    if l.startswith("#line") or l.startswith("# "):
       line = line.replace ("\\\\", "/")

    print (line)

    #
    # Print a newline after a functions or structs
    #
    if l == "}" or l == "};":
       print ("")

  print ("Removed %d empty lines." % empty_lines, file=sys.stderr)
endef

define check_for_unused_libs_py
  #
  # Check for unused libraries in a MSVC link .map file.
  # Prints with some colours using 'colorama'.
  #
  import os, sys

  map_file = sys.argv[1]

  class State():
    IDLE   = 0
    UNUSED = 1

  class Color():
    RESET = RED = WHITE = ""

  try:
    from colorama import init, Fore, Style
    init()
    Color.RESET = Style.RESET_ALL
    Color.RED   = Fore.RED + Style.BRIGHT
    Color.WHITE = Fore.WHITE + Style.BRIGHT
  except:
    pass

  def cprint (color, s):
    print ("%s%s%s" % (color, s, Color.RESET))

  def report (unused):
    num = len(unused)
    plural = [ "library", "libraries" ]
    if num > 0:
       cprint (Color.RED, "%d unused %s in %s:" % (num, plural[num > 1], map_file))
       for u in unused:
           print ("  " + u)
    cprint (Color.WHITE, "Done.\n")

  def process (state):
    unused_libs = []
    f = open (map_file, "rt")
    lines = f.readlines()
    f.close()
    for l in lines:
        l = l.strip()
        if l == "Unused libraries:":
           state = State.UNUSED
           continue
        if state == State.UNUSED:
           if l == "":
              break
           unused_libs.append (l)
    return unused_libs

  report (process(State.IDLE))
endef

DEP_CFLAGS  = -MM $(filter -D% -I%, $(CFLAGS)) -DDOING_MAKE_DEPEND
DEP_REPLACE = -e 's@\(.*\)\.o: @\n$$(OBJ_DIR)\/\1.obj: @'

#
# Fixed dependencies:
#
$(OBJ_DIR)/misc.obj: dump1090_config.h $(OBJ_DIR)/cflags_$(CC).h $(OBJ_DIR)/ldflags_$(CC).h

CURSES_SRC = $(addprefix externals/Curses/, \
               addch.c                      \
               addstr.c                     \
               attr.c                       \
               border.c                     \
               bkgd.c                       \
               clear.c                      \
               color.c                      \
               getch.c                      \
               getyx.c                      \
               initscr.c                    \
               inopts.c                     \
               kernel.c                     \
               mouse.c                      \
               move.c                       \
               outopts.c                    \
               overlay.c                    \
               pad.c                        \
               pdcclip.c                    \
               pdcdisp.c                    \
               pdcgetsc.c                   \
               pdckbd.c                     \
               pdcscrn.c                    \
               pdcsetsc.c                   \
               pdcutil.c                    \
               printw.c                     \
               refresh.c                    \
               scroll.c                     \
               slk.c                        \
               touch.c                      \
               util.c                       \
               window.c)

MIMALLOC_SRC = $(addprefix externals/mimalloc/, \
                 alloc-aligned.c                \
                 alloc-override.c               \
                 alloc-posix.c                  \
                 alloc.c                        \
                 arena.c                        \
                 bitmap.c                       \
                 heap.c                         \
                 init.c                         \
                 mimalloc-amalgamation.c        \
                 options.c                      \
                 os.c                           \
                 page-queue.c                   \
                 page.c                         \
                 prim.c                         \
                 random.c                       \
                 segment-map.c                  \
                 segment.c                      \
                 stats.c                        \
                 windows-prim.c)

$(OBJ_DIR)/amalgamation.obj:          $(CURSES_SRC)
$(OBJ_DIR)/mimalloc-amalgamation.obj: $(MIMALLOC_SRC)

depend:
	$(call generate, .depend.Windows, #)
	gcc $(DEP_CFLAGS) $(SOURCES) | sed $(DEP_REPLACE) >> .depend.Windows

-include .depend.Windows

